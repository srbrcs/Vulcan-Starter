
scalar JSON
scalar Date

# see https://docs.hasura.io/1.0/graphql/manual/queries/query-filters.html

input String_Selector {
  _eq: String
  #_gt: String
  #_gte: String
  #_ilike: String
  _in: [String!]
  #_is_null: Boolean
  #_like: String
  #_lt: String
  #_lte: String
  #_neq: String
  #_nilike: String
  #_nin: [String!]
  #_nlike: String
  #_nsimilar: String
  #_similar: String
}

input String_Array_Selector {
  contains: String_Selector
  # contains_all: [String_Selector]
}

input Int_Selector {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  #_is_null: Boolean
  _lt: Int
  _lte: Int
  #_neq: Int
  #_nin: [Int!]
}

input Int_Array_Selector {
  contains: Int_Selector
  # contains_all: [Int_Selector]
}

input Float_Selector {
  _eq: Float
  _gt: Float
  _gte: Float
  _in: [Float!]
  #_is_null: Boolean
  _lt: Float
  _lte: Float
  #_neq: Float
  #_nin: [Float!]
}

input Float_Array_Selector {
  contains: Float_Selector
  # contains_all: [Float_Selector]
}

input Boolean_Selector {
  _eq: Boolean
  #_neq: Boolean
}

input Boolean_Array_Selector {
  contains: Boolean_Selector
  # contains_all: [Boolean_Selector]
}

input Date_Selector {
  _eq: Date
  _gt: Date
  _gte: Date
  _in: [Date!]
  #_is_null: Boolean
  _lt: Date
  _lte: Date
  #_neq: Date
  #_nin: [Date!]
}

input Date_Array_Selector {
  contains: Date_Selector
  # contains_all: [Date_Selector]
}

# column ordering options
enum SortOptions {
  asc
  desc
}

input OptionsInput {
  # Whether to enable caching for this query
  enableCache: Boolean
  # For single document queries, return null instead of throwing MissingDocumentError
  allowNull: Boolean
}

type Site {
  title: String
  url: String
  logoUrl: String
  sourceVersion: String
}
type IntlValue {
  locale: String
  value: String
}
input IntlValueInput{
  locale: String
  value: String
}
directive @intl on FIELD_DEFINITION

# A user object
type User {
  _id: String 
  username: String 
  emails: [JSON] 
  createdAt: Date 
  isAdmin: Boolean 
  locale: String 
  profile: JSON 
  services: JSON 
  displayName: String 
  email: String 
  emailHash: String 
  avatarUrl: String 
  slug: String 
  twitterUsername: String 
  groups: [String] 
  pageUrl: String 
  pagePath: String 
  editUrl: String 
}


input DeleteUserInput{
  filter: UserFilterInput
  id: String
}

input SingleUserInput {
  # filtering
  filter: UserFilterInput
  sort: UserSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: UserSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
}

input MultiUserInput {

  # filtering
  filter: UserFilterInput
  sort: UserSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  
}

type SingleUserOutput{
  result: User
}

type  MultiUserOutput{
  results: [User]
  totalCount: Int
}

type UserMutationOutput{
  data: User
}

input CreateUserInput {
  data: CreateUserDataInput!
}

input CreateUserDataInput {
  username: String 
  isAdmin: Boolean 
  locale: String 
  profile: JSON 
  displayName: String 
  email: String 
  twitterUsername: String 
  groups: [String] 
}

input UpdateUserInput{
  filter: UserFilterInput
  id: String
  data: UpdateUserDataInput!
}

input UpsertUserInput{
  filter: UserFilterInput
  id: String
  data: UpdateUserDataInput!
}

input UpdateUserDataInput {
  username: String 
  isAdmin: Boolean 
  locale: String 
  displayName: String 
  email: String 
  twitterUsername: String 
  groups: [String] 
}

input UserFilterInput {
  _and: [UserFilterInput]
  _not: UserFilterInput
  _or: [UserFilterInput]


  _id: String_Selector
  username: String_Selector

  createdAt: Date_Selector
  isAdmin: Boolean_Selector
  locale: String_Selector

  displayName: String_Selector
  email: String_Selector
  emailHash: String_Selector
  avatarUrl: String_Selector
  slug: String_Selector
  twitterUsername: String_Selector

  pageUrl: String_Selector
  pagePath: String_Selector
  editUrl: String_Selector
}

input UserSortInput {
  _id: SortOptions
  username: SortOptions
  emails: SortOptions
  createdAt: SortOptions
  isAdmin: SortOptions
  locale: SortOptions
  services: SortOptions
  displayName: SortOptions
  email: SortOptions
  emailHash: SortOptions
  avatarUrl: SortOptions
  slug: SortOptions
  twitterUsername: SortOptions
  groups: SortOptions
  pageUrl: SortOptions
  pagePath: SortOptions
  editUrl: SortOptions
}

input UserSelectorInput {
  _and: [UserSelectorInput]
  _or: [UserSelectorInput]

}

input UserSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Emails
type Email {
  name: String 
  template: String 
  subject: String 
  path: String 
}


input DeleteEmailInput{
  filter: EmailFilterInput
  id: String
}

input SingleEmailInput {
  # filtering
  filter: EmailFilterInput
  sort: EmailSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: EmailSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
}

input MultiEmailInput {

  # filtering
  filter: EmailFilterInput
  sort: EmailSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  
}

type SingleEmailOutput{
  result: Email
}

type  MultiEmailOutput{
  results: [Email]
  totalCount: Int
}

type EmailMutationOutput{
  data: Email
}

input EmailFilterInput {
  _and: [EmailFilterInput]
  _not: EmailFilterInput
  _or: [EmailFilterInput]


  name: String_Selector
  template: String_Selector
  subject: String_Selector
  path: String_Selector
}

input EmailSortInput {
  name: SortOptions
  template: SortOptions
  subject: SortOptions
  path: SortOptions
}

input EmailSelectorInput {
  _and: [EmailSelectorInput]
  _or: [EmailSelectorInput]

}

input EmailSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Settings
type Setting {
  name: String 
  value: JSON 
  defaultValue: JSON 
  isPublic: Boolean 
  description: String 
}


input DeleteSettingInput{
  filter: SettingFilterInput
  id: String
}

input SingleSettingInput {
  # filtering
  filter: SettingFilterInput
  sort: SettingSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: SettingSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
}

input MultiSettingInput {

  # filtering
  filter: SettingFilterInput
  sort: SettingSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  
}

type SingleSettingOutput{
  result: Setting
}

type  MultiSettingOutput{
  results: [Setting]
  totalCount: Int
}

type SettingMutationOutput{
  data: Setting
}

input SettingFilterInput {
  _and: [SettingFilterInput]
  _not: SettingFilterInput
  _or: [SettingFilterInput]


  name: String_Selector


  isPublic: Boolean_Selector
  description: String_Selector
}

input SettingSortInput {
  name: SortOptions
  value: SortOptions
  defaultValue: SortOptions
  isPublic: SortOptions
  description: SortOptions
}

input SettingSelectorInput {
  _and: [SettingSelectorInput]
  _or: [SettingSelectorInput]

}

input SettingSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Callbacks
type Callback {
  name: String 
  iterator: JSON 
  properties: [JSON] 
  runs: String 
  newSyntax: Boolean 
  returns: String 
  description: String 
  hooks: [String] 
}


input DeleteCallbackInput{
  filter: CallbackFilterInput
  id: String
}

input SingleCallbackInput {
  # filtering
  filter: CallbackFilterInput
  sort: CallbackSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: CallbackSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
}

input MultiCallbackInput {

  # filtering
  filter: CallbackFilterInput
  sort: CallbackSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  
}

type SingleCallbackOutput{
  result: Callback
}

type  MultiCallbackOutput{
  results: [Callback]
  totalCount: Int
}

type CallbackMutationOutput{
  data: Callback
}

input CallbackFilterInput {
  _and: [CallbackFilterInput]
  _not: CallbackFilterInput
  _or: [CallbackFilterInput]


  name: String_Selector


  runs: String_Selector
  newSyntax: Boolean_Selector
  returns: String_Selector
  description: String_Selector

}

input CallbackSortInput {
  name: SortOptions
  iterator: SortOptions
  properties: SortOptions
  runs: SortOptions
  newSyntax: SortOptions
  returns: SortOptions
  description: SortOptions
  hooks: SortOptions
}

input CallbackSelectorInput {
  _and: [CallbackSelectorInput]
  _or: [CallbackSelectorInput]

}

input CallbackSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Responses
type Response {
  _id: String 
  createdAt: Date 
  updatedAt: Date 
  userId: String 
  user: User 
  pagePath: String 
  surveyId: String 
  survey: Survey 
  # Example: <code>const { foo } = bar</code>
  syntax_destructuring: String 
  # Example: <code>[...array1, ...array2]</code>
  syntax_spreadoperator: String 
  # Example: <code>const foo = () => {}</code>
  syntax_arrowfunctions: String 
  language_proxies: String 
  language_asyncawait: String 
  language_promises: String 
  language_decorators: String 
  datastructures_maps: String 
  datastructures_sets: String 
  datastructures_typedarrays: String 
  browserapis_serviceworkers: String 
  browserapis_localstorage: String 
  browserapis_i18n: String 
  browserapis_webcomponents: String 
  browserapis_webaudioapi: String 
  browserapis_webgl: String 
  browserapis_webanimationsapi: String 
  browserapis_webrtc: String 
  browserapis_webspeechapi: String 
  browserapis_webvr: String 
  browserapis_websocket: String 
  browserapis_fetchapi: String 
  otherfeatures_progressivewebappspwa: String 
  otherfeatures_webassemblywasm: String 
  patterns_objectorientedprogramming: String 
  patterns_functionalprogramming: String 
  patterns_reactiveprogramming: String 
  javascriptflavors_typescript: String 
  javascriptflavors_reason: String 
  javascriptflavors_elm: String 
  javascriptflavors_clojurescript: String 
  javascriptflavors_purescript: String 
  javascriptflavors_other: String 
  # On a scale of one (very unhappy) to five (very happy), how happy you with the current overall state of JavaScript flavors?
  javascriptflavors_overallhappiness: Float 
  frontendframeworks_react: String 
  frontendframeworks_vue: String 
  frontendframeworks_angular: String 
  frontendframeworks_preact: String 
  frontendframeworks_ember: String 
  frontendframeworks_svelte: String 
  frontendframeworks_other: String 
  # On a scale of one (very unhappy) to five (very happy), how happy you with the current overall state of front-end frameworks?
  frontendframeworks_overallhappiness: Float 
  datalayer_redux: String 
  datalayer_apollo: String 
  datalayer_graphql: String 
  datalayer_mobx: String 
  datalayer_relay: String 
  datalayer_other: String 
  # On a scale of one (very unhappy) to five (very happy), how happy you with the current overall state of data layer technologies?
  datalayer_overallhappiness: Float 
  backendframeworks_express: String 
  backendframeworks_nextjs: String 
  backendframeworks_koa: String 
  backendframeworks_meteor: String 
  backendframeworks_sails: String 
  backendframeworks_feathersjs: String 
  backendframeworks_nuxtjs: String 
  backendframeworks_gatsbyjs: String 
  backendframeworks_other: String 
  # On a scale of one (very unhappy) to five (very happy), how happy you with the current overall state of back-end frameworks?
  backendframeworks_overallhappiness: Float 
  testing_jest: String 
  testing_mocha: String 
  testing_storybook: String 
  testing_cypress: String 
  testing_enzyme: String 
  testing_ava: String 
  testing_jasmine: String 
  testing_puppeteer: String 
  testing_other: String 
  # On a scale of one (very unhappy) to five (very happy), how happy you with the current overall state of testing tools?
  testing_overallhappiness: Float 
  mobiledesktop_electron: String 
  mobiledesktop_reactnative: String 
  mobiledesktop_nativeapps: String 
  mobiledesktop_cordova: String 
  mobiledesktop_ionic: String 
  mobiledesktop_nwjs: String 
  mobiledesktop_expo: String 
  mobiledesktop_other: String 
  # On a scale of one (very unhappy) to five (very happy), how happy you with the current overall state of testing tools?
  mobiledesktop_overallhappiness: Float 
  # Which JavaScript utilities do you regularly use?
  othertools_utilities: [String] 
  # Other utilities you use not mentioned in the list above
  othertools_otherutilities: String 
  # Which text editor(s) do you regularly use?
  othertools_texteditors: [String] 
  # Other text editors you use not mentioned in the list above
  othertools_othereditors: String 
  # Which browser(s) do you work in primarily during initial development?
  othertools_browsers: [String] 
  # Other browsers you use not mentioned in the list above
  othertools_otherbrowsers: String 
  # Which build tools do you use to compile and bundle your code?
  othertools_buildtools: [String] 
  # Other build tools you use not mentioned in the list above
  othertools_otherbuildtools: String 
  # Which other languages do you code in besides JavaScript and its flavors?
  othertools_nonjslanguages: [String] 
  # Other languages you use not mentioned in the list above
  othertools_otherlanguages: String 
  # Which JavaScript-related blogs/magazines/etc. do you read?
  resources_blogsnewsmagazines: [String] 
  # Other blogs, etc. you read not mentioned in the list above
  resources_otherblogs: String 
  # Which JavaScript-related sites/courses/etc. do you consult?
  resources_sitescourses: [String] 
  # Other sites, courses, etc. you consult not mentioned in the list above
  resources_othercourses: String 
  # Which JavaScript or programming-related podcasts do you listen to?
  resources_podcasts: [String] 
  # Other podcasts you listen to not mentioned in the list above
  resources_otherpodcasts: String 
  opinionquestions_javascriptismovingintherightdirection: Float 
  opinionquestions_buildingjavascriptappsisoverlycomplexrightnow: Float 
  opinionquestions_javascriptisoverusedonline: Float 
  opinionquestions_ienjoybuildingjavascriptapps: Float 
  opinionquestions_iwouldlikejavascripttobemymainprogramminglanguage: Float 
  opinionquestions_thejavascriptecosystemischangingtoofast: Float 
  # Features you'd like to see in JavaScript one day.
  opinionquestions_whatdoyoufeeliscurrentlymissingfromjavascript: String 
  # How long you've been writing JavaScript.
  aboutyou_yearsofexperience: String 
  # How do you introduce yourself at parties?
  aboutyou_jobtitle: String 
  # Other job title you use not mentioned in the list above
  aboutyou_otherjobtitle: String 
  # How proficient are you at writing CSS? (pick the most advanced option corresponding to your skills)
  aboutyou_cssproficiency: String 
  # How proficient are you at back-end development? (pick the most advanced option corresponding to your skills)
  aboutyou_backendproficiency: String 
  aboutyou_companysize: String 
  # In USD
  aboutyou_yearlysalary: String 
  aboutyou_howdidyoufindoutaboutthissurvey: String 
  aboutyou_yourgender: String 
  # Other gender not mentioned in the list above
  aboutyou_othergender: String 
  aboutyou_yourcountry: String 
  # If you'd like to be notified when survey results are available. Your email won't be used for any other purpose.
  aboutyou_youremail: String 
}


input DeleteResponseInput{
  filter: ResponseFilterInput
  id: String
}

input SingleResponseInput {
  # filtering
  filter: ResponseFilterInput
  sort: ResponseSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: ResponseSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
}

input MultiResponseInput {

  # filtering
  filter: ResponseFilterInput
  sort: ResponseSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  
}

type SingleResponseOutput{
  result: Response
}

type  MultiResponseOutput{
  results: [Response]
  totalCount: Int
}

type ResponseMutationOutput{
  data: Response
}

input CreateResponseInput {
  data: CreateResponseDataInput!
}

input CreateResponseDataInput {
  surveyId: String 
  syntax_destructuring: String 
  syntax_spreadoperator: String 
  syntax_arrowfunctions: String 
  language_proxies: String 
  language_asyncawait: String 
  language_promises: String 
  language_decorators: String 
  datastructures_maps: String 
  datastructures_sets: String 
  datastructures_typedarrays: String 
  browserapis_serviceworkers: String 
  browserapis_localstorage: String 
  browserapis_i18n: String 
  browserapis_webcomponents: String 
  browserapis_webaudioapi: String 
  browserapis_webgl: String 
  browserapis_webanimationsapi: String 
  browserapis_webrtc: String 
  browserapis_webspeechapi: String 
  browserapis_webvr: String 
  browserapis_websocket: String 
  browserapis_fetchapi: String 
  otherfeatures_progressivewebappspwa: String 
  otherfeatures_webassemblywasm: String 
  patterns_objectorientedprogramming: String 
  patterns_functionalprogramming: String 
  patterns_reactiveprogramming: String 
  javascriptflavors_typescript: String 
  javascriptflavors_reason: String 
  javascriptflavors_elm: String 
  javascriptflavors_clojurescript: String 
  javascriptflavors_purescript: String 
  javascriptflavors_other: String 
  javascriptflavors_overallhappiness: Float 
  frontendframeworks_react: String 
  frontendframeworks_vue: String 
  frontendframeworks_angular: String 
  frontendframeworks_preact: String 
  frontendframeworks_ember: String 
  frontendframeworks_svelte: String 
  frontendframeworks_other: String 
  frontendframeworks_overallhappiness: Float 
  datalayer_redux: String 
  datalayer_apollo: String 
  datalayer_graphql: String 
  datalayer_mobx: String 
  datalayer_relay: String 
  datalayer_other: String 
  datalayer_overallhappiness: Float 
  backendframeworks_express: String 
  backendframeworks_nextjs: String 
  backendframeworks_koa: String 
  backendframeworks_meteor: String 
  backendframeworks_sails: String 
  backendframeworks_feathersjs: String 
  backendframeworks_nuxtjs: String 
  backendframeworks_gatsbyjs: String 
  backendframeworks_other: String 
  backendframeworks_overallhappiness: Float 
  testing_jest: String 
  testing_mocha: String 
  testing_storybook: String 
  testing_cypress: String 
  testing_enzyme: String 
  testing_ava: String 
  testing_jasmine: String 
  testing_puppeteer: String 
  testing_other: String 
  testing_overallhappiness: Float 
  mobiledesktop_electron: String 
  mobiledesktop_reactnative: String 
  mobiledesktop_nativeapps: String 
  mobiledesktop_cordova: String 
  mobiledesktop_ionic: String 
  mobiledesktop_nwjs: String 
  mobiledesktop_expo: String 
  mobiledesktop_other: String 
  mobiledesktop_overallhappiness: Float 
  othertools_utilities: [String] 
  othertools_otherutilities: String 
  othertools_texteditors: [String] 
  othertools_othereditors: String 
  othertools_browsers: [String] 
  othertools_otherbrowsers: String 
  othertools_buildtools: [String] 
  othertools_otherbuildtools: String 
  othertools_nonjslanguages: [String] 
  othertools_otherlanguages: String 
  resources_blogsnewsmagazines: [String] 
  resources_otherblogs: String 
  resources_sitescourses: [String] 
  resources_othercourses: String 
  resources_podcasts: [String] 
  resources_otherpodcasts: String 
  opinionquestions_javascriptismovingintherightdirection: Float 
  opinionquestions_buildingjavascriptappsisoverlycomplexrightnow: Float 
  opinionquestions_javascriptisoverusedonline: Float 
  opinionquestions_ienjoybuildingjavascriptapps: Float 
  opinionquestions_iwouldlikejavascripttobemymainprogramminglanguage: Float 
  opinionquestions_thejavascriptecosystemischangingtoofast: Float 
  opinionquestions_whatdoyoufeeliscurrentlymissingfromjavascript: String 
  aboutyou_yearsofexperience: String 
  aboutyou_jobtitle: String 
  aboutyou_otherjobtitle: String 
  aboutyou_cssproficiency: String 
  aboutyou_backendproficiency: String 
  aboutyou_companysize: String 
  aboutyou_yearlysalary: String 
  aboutyou_howdidyoufindoutaboutthissurvey: String 
  aboutyou_yourgender: String 
  aboutyou_othergender: String 
  aboutyou_yourcountry: String 
  aboutyou_youremail: String 
}

input UpdateResponseInput{
  filter: ResponseFilterInput
  id: String
  data: UpdateResponseDataInput!
}

input UpsertResponseInput{
  filter: ResponseFilterInput
  id: String
  data: UpdateResponseDataInput!
}

input UpdateResponseDataInput {
  surveyId: String 
  syntax_destructuring: String 
  syntax_spreadoperator: String 
  syntax_arrowfunctions: String 
  language_proxies: String 
  language_asyncawait: String 
  language_promises: String 
  language_decorators: String 
  datastructures_maps: String 
  datastructures_sets: String 
  datastructures_typedarrays: String 
  browserapis_serviceworkers: String 
  browserapis_localstorage: String 
  browserapis_i18n: String 
  browserapis_webcomponents: String 
  browserapis_webaudioapi: String 
  browserapis_webgl: String 
  browserapis_webanimationsapi: String 
  browserapis_webrtc: String 
  browserapis_webspeechapi: String 
  browserapis_webvr: String 
  browserapis_websocket: String 
  browserapis_fetchapi: String 
  otherfeatures_progressivewebappspwa: String 
  otherfeatures_webassemblywasm: String 
  patterns_objectorientedprogramming: String 
  patterns_functionalprogramming: String 
  patterns_reactiveprogramming: String 
  javascriptflavors_typescript: String 
  javascriptflavors_reason: String 
  javascriptflavors_elm: String 
  javascriptflavors_clojurescript: String 
  javascriptflavors_purescript: String 
  javascriptflavors_other: String 
  javascriptflavors_overallhappiness: Float 
  frontendframeworks_react: String 
  frontendframeworks_vue: String 
  frontendframeworks_angular: String 
  frontendframeworks_preact: String 
  frontendframeworks_ember: String 
  frontendframeworks_svelte: String 
  frontendframeworks_other: String 
  frontendframeworks_overallhappiness: Float 
  datalayer_redux: String 
  datalayer_apollo: String 
  datalayer_graphql: String 
  datalayer_mobx: String 
  datalayer_relay: String 
  datalayer_other: String 
  datalayer_overallhappiness: Float 
  backendframeworks_express: String 
  backendframeworks_nextjs: String 
  backendframeworks_koa: String 
  backendframeworks_meteor: String 
  backendframeworks_sails: String 
  backendframeworks_feathersjs: String 
  backendframeworks_nuxtjs: String 
  backendframeworks_gatsbyjs: String 
  backendframeworks_other: String 
  backendframeworks_overallhappiness: Float 
  testing_jest: String 
  testing_mocha: String 
  testing_storybook: String 
  testing_cypress: String 
  testing_enzyme: String 
  testing_ava: String 
  testing_jasmine: String 
  testing_puppeteer: String 
  testing_other: String 
  testing_overallhappiness: Float 
  mobiledesktop_electron: String 
  mobiledesktop_reactnative: String 
  mobiledesktop_nativeapps: String 
  mobiledesktop_cordova: String 
  mobiledesktop_ionic: String 
  mobiledesktop_nwjs: String 
  mobiledesktop_expo: String 
  mobiledesktop_other: String 
  mobiledesktop_overallhappiness: Float 
  othertools_utilities: [String] 
  othertools_otherutilities: String 
  othertools_texteditors: [String] 
  othertools_othereditors: String 
  othertools_browsers: [String] 
  othertools_otherbrowsers: String 
  othertools_buildtools: [String] 
  othertools_otherbuildtools: String 
  othertools_nonjslanguages: [String] 
  othertools_otherlanguages: String 
  resources_blogsnewsmagazines: [String] 
  resources_otherblogs: String 
  resources_sitescourses: [String] 
  resources_othercourses: String 
  resources_podcasts: [String] 
  resources_otherpodcasts: String 
  opinionquestions_javascriptismovingintherightdirection: Float 
  opinionquestions_buildingjavascriptappsisoverlycomplexrightnow: Float 
  opinionquestions_javascriptisoverusedonline: Float 
  opinionquestions_ienjoybuildingjavascriptapps: Float 
  opinionquestions_iwouldlikejavascripttobemymainprogramminglanguage: Float 
  opinionquestions_thejavascriptecosystemischangingtoofast: Float 
  opinionquestions_whatdoyoufeeliscurrentlymissingfromjavascript: String 
  aboutyou_yearsofexperience: String 
  aboutyou_jobtitle: String 
  aboutyou_otherjobtitle: String 
  aboutyou_cssproficiency: String 
  aboutyou_backendproficiency: String 
  aboutyou_companysize: String 
  aboutyou_yearlysalary: String 
  aboutyou_howdidyoufindoutaboutthissurvey: String 
  aboutyou_yourgender: String 
  aboutyou_othergender: String 
  aboutyou_yourcountry: String 
  aboutyou_youremail: String 
}

input ResponseFilterInput {
  _and: [ResponseFilterInput]
  _not: ResponseFilterInput
  _or: [ResponseFilterInput]


  _id: String_Selector
  createdAt: Date_Selector
  updatedAt: Date_Selector
  userId: String_Selector
  pagePath: String_Selector
  surveyId: String_Selector
  syntax_destructuring: String_Selector
  syntax_spreadoperator: String_Selector
  syntax_arrowfunctions: String_Selector
  language_proxies: String_Selector
  language_asyncawait: String_Selector
  language_promises: String_Selector
  language_decorators: String_Selector
  datastructures_maps: String_Selector
  datastructures_sets: String_Selector
  datastructures_typedarrays: String_Selector
  browserapis_serviceworkers: String_Selector
  browserapis_localstorage: String_Selector
  browserapis_i18n: String_Selector
  browserapis_webcomponents: String_Selector
  browserapis_webaudioapi: String_Selector
  browserapis_webgl: String_Selector
  browserapis_webanimationsapi: String_Selector
  browserapis_webrtc: String_Selector
  browserapis_webspeechapi: String_Selector
  browserapis_webvr: String_Selector
  browserapis_websocket: String_Selector
  browserapis_fetchapi: String_Selector
  otherfeatures_progressivewebappspwa: String_Selector
  otherfeatures_webassemblywasm: String_Selector
  patterns_objectorientedprogramming: String_Selector
  patterns_functionalprogramming: String_Selector
  patterns_reactiveprogramming: String_Selector
  javascriptflavors_typescript: String_Selector
  javascriptflavors_reason: String_Selector
  javascriptflavors_elm: String_Selector
  javascriptflavors_clojurescript: String_Selector
  javascriptflavors_purescript: String_Selector
  javascriptflavors_other: String_Selector
  javascriptflavors_overallhappiness: Float_Selector
  frontendframeworks_react: String_Selector
  frontendframeworks_vue: String_Selector
  frontendframeworks_angular: String_Selector
  frontendframeworks_preact: String_Selector
  frontendframeworks_ember: String_Selector
  frontendframeworks_svelte: String_Selector
  frontendframeworks_other: String_Selector
  frontendframeworks_overallhappiness: Float_Selector
  datalayer_redux: String_Selector
  datalayer_apollo: String_Selector
  datalayer_graphql: String_Selector
  datalayer_mobx: String_Selector
  datalayer_relay: String_Selector
  datalayer_other: String_Selector
  datalayer_overallhappiness: Float_Selector
  backendframeworks_express: String_Selector
  backendframeworks_nextjs: String_Selector
  backendframeworks_koa: String_Selector
  backendframeworks_meteor: String_Selector
  backendframeworks_sails: String_Selector
  backendframeworks_feathersjs: String_Selector
  backendframeworks_nuxtjs: String_Selector
  backendframeworks_gatsbyjs: String_Selector
  backendframeworks_other: String_Selector
  backendframeworks_overallhappiness: Float_Selector
  testing_jest: String_Selector
  testing_mocha: String_Selector
  testing_storybook: String_Selector
  testing_cypress: String_Selector
  testing_enzyme: String_Selector
  testing_ava: String_Selector
  testing_jasmine: String_Selector
  testing_puppeteer: String_Selector
  testing_other: String_Selector
  testing_overallhappiness: Float_Selector
  mobiledesktop_electron: String_Selector
  mobiledesktop_reactnative: String_Selector
  mobiledesktop_nativeapps: String_Selector
  mobiledesktop_cordova: String_Selector
  mobiledesktop_ionic: String_Selector
  mobiledesktop_nwjs: String_Selector
  mobiledesktop_expo: String_Selector
  mobiledesktop_other: String_Selector
  mobiledesktop_overallhappiness: Float_Selector

  othertools_otherutilities: String_Selector

  othertools_othereditors: String_Selector

  othertools_otherbrowsers: String_Selector

  othertools_otherbuildtools: String_Selector

  othertools_otherlanguages: String_Selector

  resources_otherblogs: String_Selector

  resources_othercourses: String_Selector

  resources_otherpodcasts: String_Selector
  opinionquestions_javascriptismovingintherightdirection: Float_Selector
  opinionquestions_buildingjavascriptappsisoverlycomplexrightnow: Float_Selector
  opinionquestions_javascriptisoverusedonline: Float_Selector
  opinionquestions_ienjoybuildingjavascriptapps: Float_Selector
  opinionquestions_iwouldlikejavascripttobemymainprogramminglanguage: Float_Selector
  opinionquestions_thejavascriptecosystemischangingtoofast: Float_Selector
  opinionquestions_whatdoyoufeeliscurrentlymissingfromjavascript: String_Selector
  aboutyou_yearsofexperience: String_Selector
  aboutyou_jobtitle: String_Selector
  aboutyou_otherjobtitle: String_Selector
  aboutyou_cssproficiency: String_Selector
  aboutyou_backendproficiency: String_Selector
  aboutyou_companysize: String_Selector
  aboutyou_yearlysalary: String_Selector
  aboutyou_howdidyoufindoutaboutthissurvey: String_Selector
  aboutyou_yourgender: String_Selector
  aboutyou_othergender: String_Selector
  aboutyou_yourcountry: String_Selector
  aboutyou_youremail: String_Selector
}

input ResponseSortInput {
  _id: SortOptions
  createdAt: SortOptions
  updatedAt: SortOptions
  userId: SortOptions
  pagePath: SortOptions
  surveyId: SortOptions
  syntax_destructuring: SortOptions
  syntax_spreadoperator: SortOptions
  syntax_arrowfunctions: SortOptions
  language_proxies: SortOptions
  language_asyncawait: SortOptions
  language_promises: SortOptions
  language_decorators: SortOptions
  datastructures_maps: SortOptions
  datastructures_sets: SortOptions
  datastructures_typedarrays: SortOptions
  browserapis_serviceworkers: SortOptions
  browserapis_localstorage: SortOptions
  browserapis_i18n: SortOptions
  browserapis_webcomponents: SortOptions
  browserapis_webaudioapi: SortOptions
  browserapis_webgl: SortOptions
  browserapis_webanimationsapi: SortOptions
  browserapis_webrtc: SortOptions
  browserapis_webspeechapi: SortOptions
  browserapis_webvr: SortOptions
  browserapis_websocket: SortOptions
  browserapis_fetchapi: SortOptions
  otherfeatures_progressivewebappspwa: SortOptions
  otherfeatures_webassemblywasm: SortOptions
  patterns_objectorientedprogramming: SortOptions
  patterns_functionalprogramming: SortOptions
  patterns_reactiveprogramming: SortOptions
  javascriptflavors_typescript: SortOptions
  javascriptflavors_reason: SortOptions
  javascriptflavors_elm: SortOptions
  javascriptflavors_clojurescript: SortOptions
  javascriptflavors_purescript: SortOptions
  javascriptflavors_other: SortOptions
  javascriptflavors_overallhappiness: SortOptions
  frontendframeworks_react: SortOptions
  frontendframeworks_vue: SortOptions
  frontendframeworks_angular: SortOptions
  frontendframeworks_preact: SortOptions
  frontendframeworks_ember: SortOptions
  frontendframeworks_svelte: SortOptions
  frontendframeworks_other: SortOptions
  frontendframeworks_overallhappiness: SortOptions
  datalayer_redux: SortOptions
  datalayer_apollo: SortOptions
  datalayer_graphql: SortOptions
  datalayer_mobx: SortOptions
  datalayer_relay: SortOptions
  datalayer_other: SortOptions
  datalayer_overallhappiness: SortOptions
  backendframeworks_express: SortOptions
  backendframeworks_nextjs: SortOptions
  backendframeworks_koa: SortOptions
  backendframeworks_meteor: SortOptions
  backendframeworks_sails: SortOptions
  backendframeworks_feathersjs: SortOptions
  backendframeworks_nuxtjs: SortOptions
  backendframeworks_gatsbyjs: SortOptions
  backendframeworks_other: SortOptions
  backendframeworks_overallhappiness: SortOptions
  testing_jest: SortOptions
  testing_mocha: SortOptions
  testing_storybook: SortOptions
  testing_cypress: SortOptions
  testing_enzyme: SortOptions
  testing_ava: SortOptions
  testing_jasmine: SortOptions
  testing_puppeteer: SortOptions
  testing_other: SortOptions
  testing_overallhappiness: SortOptions
  mobiledesktop_electron: SortOptions
  mobiledesktop_reactnative: SortOptions
  mobiledesktop_nativeapps: SortOptions
  mobiledesktop_cordova: SortOptions
  mobiledesktop_ionic: SortOptions
  mobiledesktop_nwjs: SortOptions
  mobiledesktop_expo: SortOptions
  mobiledesktop_other: SortOptions
  mobiledesktop_overallhappiness: SortOptions
  othertools_utilities: SortOptions
  othertools_otherutilities: SortOptions
  othertools_texteditors: SortOptions
  othertools_othereditors: SortOptions
  othertools_browsers: SortOptions
  othertools_otherbrowsers: SortOptions
  othertools_buildtools: SortOptions
  othertools_otherbuildtools: SortOptions
  othertools_nonjslanguages: SortOptions
  othertools_otherlanguages: SortOptions
  resources_blogsnewsmagazines: SortOptions
  resources_otherblogs: SortOptions
  resources_sitescourses: SortOptions
  resources_othercourses: SortOptions
  resources_podcasts: SortOptions
  resources_otherpodcasts: SortOptions
  opinionquestions_javascriptismovingintherightdirection: SortOptions
  opinionquestions_buildingjavascriptappsisoverlycomplexrightnow: SortOptions
  opinionquestions_javascriptisoverusedonline: SortOptions
  opinionquestions_ienjoybuildingjavascriptapps: SortOptions
  opinionquestions_iwouldlikejavascripttobemymainprogramminglanguage: SortOptions
  opinionquestions_thejavascriptecosystemischangingtoofast: SortOptions
  opinionquestions_whatdoyoufeeliscurrentlymissingfromjavascript: SortOptions
  aboutyou_yearsofexperience: SortOptions
  aboutyou_jobtitle: SortOptions
  aboutyou_otherjobtitle: SortOptions
  aboutyou_cssproficiency: SortOptions
  aboutyou_backendproficiency: SortOptions
  aboutyou_companysize: SortOptions
  aboutyou_yearlysalary: SortOptions
  aboutyou_howdidyoufindoutaboutthissurvey: SortOptions
  aboutyou_yourgender: SortOptions
  aboutyou_othergender: SortOptions
  aboutyou_yourcountry: SortOptions
  aboutyou_youremail: SortOptions
}

input ResponseSelectorInput {
  _and: [ResponseSelectorInput]
  _or: [ResponseSelectorInput]

}

input ResponseSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Surveys
type Survey {
  _id: String 
  createdAt: Date 
  updatedAt: Date 
  userId: String 
  user: User 
  name: String 
  year: Float 
  status: Float 
  pagePath: String 
  slug: String 
  currentUserResponse: Response 
}


input DeleteSurveyInput{
  filter: SurveyFilterInput
  id: String
}

input SingleSurveyInput {
  # filtering
  filter: SurveyFilterInput
  sort: SurveySortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: SurveySelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
}

input MultiSurveyInput {

  # filtering
  filter: SurveyFilterInput
  sort: SurveySortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  
}

type SingleSurveyOutput{
  result: Survey
}

type  MultiSurveyOutput{
  results: [Survey]
  totalCount: Int
}

type SurveyMutationOutput{
  data: Survey
}

input CreateSurveyInput {
  data: CreateSurveyDataInput!
}

input CreateSurveyDataInput {
  name: String 
  year: Float 
  status: Float 
}

input UpdateSurveyInput{
  filter: SurveyFilterInput
  id: String
  data: UpdateSurveyDataInput!
}

input UpsertSurveyInput{
  filter: SurveyFilterInput
  id: String
  data: UpdateSurveyDataInput!
}

input UpdateSurveyDataInput {
  name: String 
  year: Float 
  status: Float 
}

input SurveyFilterInput {
  _and: [SurveyFilterInput]
  _not: SurveyFilterInput
  _or: [SurveyFilterInput]


  _id: String_Selector
  createdAt: Date_Selector
  updatedAt: Date_Selector
  userId: String_Selector
  name: String_Selector
  year: Float_Selector
  status: Float_Selector
  pagePath: String_Selector
  slug: String_Selector

}

input SurveySortInput {
  _id: SortOptions
  createdAt: SortOptions
  updatedAt: SortOptions
  userId: SortOptions
  name: SortOptions
  year: SortOptions
  status: SortOptions
  pagePath: SortOptions
  slug: SortOptions
  currentUserResponse: SortOptions
}

input SurveySelectorInput {
  _and: [SurveySelectorInput]
  _or: [SurveySelectorInput]

}

input SurveySelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}




type Query {
  SiteData: Site
  
  currentUser: User
  
  # A single User document fetched by ID or slug
  user(input: SingleUserInput!): SingleUserOutput
  
  # A list of User documents matching a set of query terms
  users(input: MultiUserInput):  MultiUserOutput
  
  emails(input: MultiEmailInput):  MultiEmailOutput
  
  settings(input: MultiSettingInput):  MultiSettingOutput
  
  callbacks(input: MultiCallbackInput):  MultiCallbackOutput
  
  # A single Response document fetched by ID or slug
  response(input: SingleResponseInput!): SingleResponseOutput
  
  # A list of Response documents matching a set of query terms
  responses(input: MultiResponseInput):  MultiResponseOutput
  
  # A single Survey document fetched by ID or slug
  survey(input: SingleSurveyInput!): SingleSurveyOutput
  
  # A list of Survey documents matching a set of query terms
  surveys(input: MultiSurveyInput):  MultiSurveyOutput
  
}
  

type Mutation {
  # Mutation for creating new User documents
  createUser(
  input: CreateUserInput,
  "Deprecated (use 'input' field instead)."
  data: CreateUserDataInput
) : UserMutationOutput

  # Mutation for updating a User document
  updateUser(
  input: UpdateUserInput,
  "Deprecated (use 'input' field instead)."
  selector: UserSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateUserDataInput 
) : UserMutationOutput

  # Mutation for upserting a User document
  upsertUser(
  input: UpsertUserInput,
  "Deprecated (use 'input' field instead)."
  selector: UserSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateUserDataInput
) : UserMutationOutput

  # Mutation for deleting a User document
  deleteUser(
  input: DeleteUserInput,
  "Deprecated (use 'input' field instead)."
  selector: UserSelectorUniqueInput
) : UserMutationOutput

  # Mutation for creating new Response documents
  createResponse(
  input: CreateResponseInput,
  "Deprecated (use 'input' field instead)."
  data: CreateResponseDataInput
) : ResponseMutationOutput

  # Mutation for updating a Response document
  updateResponse(
  input: UpdateResponseInput,
  "Deprecated (use 'input' field instead)."
  selector: ResponseSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateResponseDataInput 
) : ResponseMutationOutput

  # Mutation for upserting a Response document
  upsertResponse(
  input: UpsertResponseInput,
  "Deprecated (use 'input' field instead)."
  selector: ResponseSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateResponseDataInput
) : ResponseMutationOutput

  # Mutation for deleting a Response document
  deleteResponse(
  input: DeleteResponseInput,
  "Deprecated (use 'input' field instead)."
  selector: ResponseSelectorUniqueInput
) : ResponseMutationOutput

  # Mutation for creating new Survey documents
  createSurvey(
  input: CreateSurveyInput,
  "Deprecated (use 'input' field instead)."
  data: CreateSurveyDataInput
) : SurveyMutationOutput

  # Mutation for updating a Survey document
  updateSurvey(
  input: UpdateSurveyInput,
  "Deprecated (use 'input' field instead)."
  selector: SurveySelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateSurveyDataInput 
) : SurveyMutationOutput

  # Mutation for upserting a Survey document
  upsertSurvey(
  input: UpsertSurveyInput,
  "Deprecated (use 'input' field instead)."
  selector: SurveySelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateSurveyDataInput
) : SurveyMutationOutput

  # Mutation for deleting a Survey document
  deleteSurvey(
  input: DeleteSurveyInput,
  "Deprecated (use 'input' field instead)."
  selector: SurveySelectorUniqueInput
) : SurveyMutationOutput

}


